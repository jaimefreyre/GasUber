Antes de comenzar vamos a explicar algunos de los esquemas de comunicación más usados, para comprender mejor el sentido de signalr.

PULL: es el esquema básico de comunicación HTTP, en la que el cliente realiza una petición (GET, POST…) a un servidor web y queda a la espera de la respuesta. Se trata de un proceso sincrono, es decir, el cliente espera sin hacer nada hasta recibir la respuesta del servidor.
AJAX: En un esquema de comunicación PULL, AJAX permite añadir capacidades asincroninas. Inicialmente se realiza una petición http (pull), tras la cual, la web es mostrada en el cliente. Posteriormente, el cliente puede realizar peticiones AJAX sin abandonar la pagina actual. Estas peticiones se realizan en segundo plano de forma que podemos actualizar porciones de nuestra página o enviar datos al servidor.
POOLLING: este esquema surge por la necesidad de obtener datos en tiempo real. Por ejemplo: un chat, juegos online … Es este caso, el cliente realiza peticiones periódicas al servidor, para comprobar si hay datos pendientes. Como este modelo de comunicación, podemos simular la comunicación en tiempo real. Esta solución es fácil de implementar y es compatible con todos lo navegadores, pero puede llegar a crear problemas de rendimiento cuando el numero de clientes es alto o la frecuencia de las peticiones se reduce para dar mayor sensación de inmediatez.
Sobre este esquema de comunicación, existen numerosas mejoras. Una de ellas es que las peticiones sean realizadas usando un periodo adaptativo, de forma que el intervalo de las peticiones varié en función de la carga del sistema, hora de día…
PUSH: Hasta ahora las peticiones de comunicación siempre habían sido iniciadas por el cliente, pero en muchos casos es necesario que sea el servidor, el que tome la iniciativa en el envió de datos. Sin embargo, por cuestiones de seguridad, esto es prácticamente imposible ya que resulta imposible establecer una conexión directa debido a la existencia de routers , firewalls o proxies. Por normal general este esquema requiere que el cliente inicie la comunicación y mantenga el canal abierto a la espera de recibir las actualizaciones.
Algunas de las tecnologías que permiten este tipo de comunicación son:
WEBSOCKETS: es un estandar definido por el W3C que permite crear un canal bidireccional ente cliente y servidor. Esta es una de las mejores soluciones para la implemetación de servicios PUSH en tiempo real, pero solo es soportada por las últimas versiones de los navegadores web. Además, la implementación del servidor WebSocket usando tecnologías no fue posible (de una forma sencilla) hasta la llegada de IIS8, ASP.NET 4.5, WCF.
SERVER-SENT EVENTS: es un API basado en Javascript, el cual crea un canal de comunicación unidireccional desde el servidor al cliente, pero el canal es iniciado por el cliente. En este esquema, el cliente se registra sobre un origen de eventos del servidor y queda a la espera de recibir notificaciones. Esta implementación es mucho más compatible que WebSockets, ya que se basa en HTTP y Javascript.
Nota: si el cliente necesita enviar datos al servidor, es necesario usar otro canal de comunicación diferente.
LONG POOLING: es un esquema similar al Pooling, pero con algunas diferencias. Al hacer una petición, si no hay datos, el canal queda abierto hasta que el servidor tenga que enviar algún dato o se produzca un error de timeout.
FOREVER FRAME: en este caso se una un tag HTML “IFRAME” para conseguir una conexión permanente con el servidor. En la Url del IFRAME hay que establecer la URL donde el servidor esta escuchando. Es un proceso muy similar a “Server-Sent Events”. Esta técnica tiene un amplio espectro de compatibilidad, ya que se basa en HTML, HTTP y Javascript.